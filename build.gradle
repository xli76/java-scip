buildscript {
    repositories {
        maven {
            url 'https://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }
}

plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

allprojects {
    repositories {
        maven {
            url 'https://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation files('src/main/resources/lib/scip.jar')
}

test {
	useJUnitPlatform()
}

// tasks.withType(JavaExec) {
// 	systemProperty "java.library.path", "src/main/resources/lib"
// }

// tasks.withType(Test) {
// 	systemProperty "java.library.path", "src/main/resources/lib"
// }

import org.gradle.internal.os.OperatingSystem;

def getOsName(project) {
    if (OperatingSystem.current().isMacOsX()) {
        return "macosx"
    } else if (OperatingSystem.current().isLinux()) {
        return "centos"
    }
    return "unix"
}

def getOsArch(project) {
    String arch = OperatingSystem.current().getArch()
    if ("aarch64" == arch) {
        return "arm64"
    }
    return arch
}

tasks.withType(JavaExec) {
    String osName = getOsName()
    String osArch = getOsArch()
    systemProperty "java.library.path", "src/main/resources/lib/$osName/$osArch"
}

tasks.withType(Test) {
    String osName = getOsName()
    String osArch = getOsArch()
    systemProperty "java.library.path", "src/main/resources/lib/$osName/$osArch"
}